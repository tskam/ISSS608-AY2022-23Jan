---
title: "Building Web-enabled Visual Analytics Applications with Shiny: Shiny basic"
subtitle: ""  
author: "Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems"
institute: "School of Computing and Information Systems,<br/>Singapore Management University"
date: "`r Sys.Date()`"
format: 
  revealjs:
    width: 1600
    height: 900
    show-notes: false
    slide-number: true
    show-slide-number: 'all'
date-format: "DD MMM YYYY"    
editor: visual
---

## Content

-   What is a Web-enabled Visual Analytics Application?

-   Why building Web-enabled Visual Analytical Application?

-   Evolution of web-based Technology

-   Getting to Know Shiny

## What is a Web-enabled Visual Analytics Application?

::: columns
::: {.column width="40%"}
-   Focuses and emphasises on **interactivity** and effective integration of techniques from **data analytics, visualization and human-computer interaction (HCI)**.
:::

::: {.column width="60%"}
![](img/image1.jpg)
:::
:::

------------------------------------------------------------------------

### Why building a Web-enabled Visual Analytics Application?

::: columns
::: {.column width="50%"}
-   To explore how the best of these different but related domains can be combined such that **the sum is greater than the parts**.

-   To **democratise data and analytics** through web-based analytical applications for data exploration, visualisation analysis and modelling.
:::

::: {.column width="50%"}
![](img/image2.jpg)

::: {style="font-size: 0.75em"}
Source: [Democratize data analytics customer data platform](https://www.rekener.com/blog/democratize-data-analytics-customer-data-platform-B2B)
:::
:::
:::

------------------------------------------------------------------------

### Technology Challenges

::: columns
::: {.column width="50%"}
-   Mainframe computing tend to have low usability and low accessibility.

-   Desktop computing tend to have high usability but low accessibility.

-   Web-based computing (including mobile computing) are highly accesible but with relatively low capability.
:::

::: {.column width="50%"}
![](img/image3.jpg)
:::
:::

------------------------------------------------------------------------

### Web-based data visualisation

::: columns
::: {.column width="50%"}
-   The break-through is Rich Internet Applications (RIA)
:::

::: {.column width="50%"}
![](img/image3-1.jpg)
:::
:::

::: {style="font-size: 0.75em"}
Reference: [Rich Internet Applications](https://www.computerworld.com/article/2551058/rich-internet-applications.html)
:::

------------------------------------------------------------------------

### Development of RIA

::: columns
::: {.column width="50%"}
#### First generation RIA data visualisation (2000\~)

-   Adobe Flex Builder
    -   [Flare](http://flare.prefuse.org/)
-   Microsoft Silverlight
-   JavaFX
:::

::: {.column width="50%"}
#### Second generation RIA data visualisation (2010\~)

-   HTML 5 + JavaScript + SVG + CSS
    -   Client-side rendering
    -   No plug-in is required
    -   Mobile computing enabled
-   [D3.js](https://d3js.org/) - Data Driven Document
:::
:::

------------------------------------------------------------------------

### Methodological Challenges

::: columns
::: {.column width="50%"}
-   Lack of analysis functions.

-   Not reproducible.

-   Not extendable.

-   Require to learn multiple technologies and methods.
:::

::: {.column width="50%"}
![](img/image4.jpg)
:::
:::

## Getting to Know Shiny

### Shiny: Overview

::: columns
::: {.column width="50%"}
-   Shiny is an open source package from [Posit](https://posit.co/) (formally called RStudio).

-   It provides a **web application framework** to create interactive web applications (visualization) called "Shiny apps".

-   To learn more about Shiny, visit its [homepage](https://shiny.rstudio.com/)
:::

::: {.column width="50%"}
![](img/image5.jpg)
:::
:::

## Getting to Know Shiny

### What is so special about Shiny?

::: columns
::: {.column width="50%"}
It allows R users:

-   to build and share highly interactive web-enabled applications without having to invest significant among of time and efforts to master core web design technologies such as html5, Javascript and CSS.

-   to integrate the analytical and visualisation packages of R without having to change from one programming language to another.
:::

::: {.column width="50%"}
![](img/image6.jpg)
:::
:::

## Getting to Know Shiny

### Understanding the architecture

-   Every Shiny app is maintained by a computer running R.

![](img/image7.jpg)

## Getting to Know Shiny

### The Structure of a Shiny app

::: columns
::: {.column width="50%"}
-   A Shiny app comprises of two components, namely:
    -   a user-interface script, and
    -   a server script.
:::

::: {.column width="50%"}
![](img/image7-1.jpg)
:::
:::

## Getting to Know Shiny

### Shiny's user-interface, *ui.R*

-   The *ui.R* script controls the layout and appearance of a shiny app.
    -   It is defined in a source script name *ui.R*.

    -   Actually, *ui* is a web document that the user gets to see, it is based on the famous Twitter bootstrap framework, which makes the look and layout highly customizable and fully responsive.

    -   In fact, you only need to know R and how to use the shiny package to build a pretty web application. Also, a little knowledge of HTML, CSS, and JavaScript may help.

## Getting to Know Shiny

### Shiny's server *server.R*

-   The *server.R* script contains the instructions that your computer needs to build your Shiny app.

-   You are expected to:

    -   know how to programme with R.
    -   familiar with Tidyverse, specifically dplyr, tidyr and ggplot2

## Getting to Know Shiny

### Shiny Examples

The Shiny package has eleven built-in examples that each demonstrates how Shiny works.

![](img/image7-2.jpg)

## Getting to Know Shiny

### Running Shiny example

::: columns
::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
library(shiny)
runExample("01_hello")
```
:::

::: {.column width="50%"}
![](img/image7-3.jpg){fig-align="center" width="543"}
:::
:::

## Building a Shiny app

-   A Shiny app can be in a form of a single file called ***app.R***.
-   Alternatively, a Shiny app can be also created using separate ***ui.R*** and ***server.R*** files.
-   The seperate files way is preferred when the app is complex and involves more codes.

![](img/image8.jpg)

------------------------------------------------------------------------

### A basic Shiny app script

![](img/image9.jpg)

------------------------------------------------------------------------

### Important tips of Shiny app file

::: columns
::: {.column width="50%"}
::: callout-tip
-   It is very important that the name of the file is *app.R*, otherwise it would not be recognized as a Shiny app.

-   You should not have any R code after the `shinyApp(ui = ui, server = server)` line. That line needs to be the last line in your file.

-   It is good practice to place this app in its own folder, and not in a folder that already has other R scripts or files, unless those other files are used by your app.
:::
:::
:::

------------------------------------------------------------------------

### Loading the dataset

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
library(shiny)
library(tidyverse)

exam <- read_csv("data/Exam_data.csv")

ui <- fluidPage()
server <- function(input, output) {}
shinyApp (ui=ui, server=server)
```
:::

::: {.column width="50%"}
-   Make sure that the data file path and file name are correct.

-   To check if the dataset has been added correctly, you can add a `print()` argument after reading the data.
:::
:::

## Shiny Layout

-   Shiny ui.R scripts use the function *fluidPage* to create a display that automatically adjusts to the dimensions of your user's browser window.

-   You lay out your app by placing elements in the fluidPage function.

-   *titlePanel* and *sidebarLayout* are the two most popular elements to add to fluidPage. They create a basic Shiny app with a sidebar.

## Shiny Layout Panels

-   Panels are used to group multiple elements into a single element that has its own properties.

-   Especially important and useful for complex apps with a large number of inputs and outputs such that it might not be clear to the user where to get started.

![](img/image10.jpg)

------------------------------------------------------------------------

### Working with `titlePanel`

::: columns
::: {.column width="60%"}
-   [`titlePanel()`](https://shiny.rstudio.com/reference/shiny/1.7.4/titlepanel) is used to add the application title.

```{r, echo=TRUE, eval=FALSE}
library(shiny)
library(tidyverse)

exam <- read_csv("data/Exam_data.csv")

ui <- fluidPage( #<<
  titlePanel("Pupils Examination Results Dashboard") #<<
) #<<

server <- function(input, output) {}

shinyApp (ui=ui, server=server)
```
:::

::: {.column width="40%"}
![](img/image18.jpg)
:::
:::

------------------------------------------------------------------------

### Shiny Layout Panel : `sidebarLayout()`

::: columns
::: {.column width="50%"}
-   [`sidebarLayout()`](https://shiny.rstudio.com/reference/shiny/1.7.4/sidebarlayout) always takes two arguments:
    -   `sidebarPanel()` function output
    -   `mainPanel()` function output
-   These functions place content in either the sidebar or the main panels.
-   The `sidebarPanel()` will appear on the left side of your app by default. You can move it to the right side by giving `sidebarLayout()` the optional argument position = "right".
:::

::: {.column width="50%"}
![](img/image15a.jpg){width="547"}

![](img/image15b.jpg)
:::
:::

---

### Hands-on Exercise: Working with `sidebarLayout()`

::: columns
::: {.column width="50%"}

Lets add the highlighted codes into the original code chunk.

```{r, echo=TRUE,eval=FALSE}
#| echo: true
#| eval: false
#| code-line-numbers: "8,9,10,11"
library(shiny)
library(tidyverse)

exam <- read_csv("data/Exam_data.csv")

ui <- fluidPage(
  titlePanel("Pupils Examination Results Dashboard"),
  sidebarLayout(
    sidebarPanel("Side bar panel"),
    mainPanel("View display")
  )
)

server <- function(input, output) {}
shinyApp (ui=ui, server=server)
```
:::

::: {.column width="50%"}
Refresh Shiny App and your screen should look similar to the figure below.

![](img/image19.jpg)

::: {.callout-note}
Note that in a fluid design your sidebar and other elements may "collapse" if your browser view is not wide enough.
:::
:::
:::

## Shiny Inputs

### An overview of Shiny Inputs

::: columns
::: {.column width="50%"}
-   Inputs are what gives users a way to interact with a Shiny app.

-   Shiny provides many input functions to support many kinds of interactions that the user could have with an app.
:::

::: {.column width="50%"}
![](img/image26.jpg)
:::
:::

Reference: Refer to [2 Basic UI](https://mastering-shiny.org/basic-ui.html) of Master Shiny to learn more about Shiny UI usage and arguments.

## Shiny Inputs
### Inputs syntax

::: columns
::: {.column width="50%"}
-   All input functions have the same first two arguments: inputId and label.
-   The inputId will be the name that Shiny will use to refer to this input when you want to retrieve its current value.
-   It is important to note that every input must have a unique inputId.
-   The label argument specifies the text in the display label that goes along with the input widget.
-   Every input can also have multiple other arguments specific to that input type.
:::

::: {.column width="50%"}
![](img/image27.jpg)
:::
:::

---

### Hands-on Exercise: Adding inputs

::: columns
::: {.column width="50%"}
Adding inputs to the UI by using [`selectInput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/selectinput) and [`sliderInput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/sliderinput).

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4-16"
ui <- fluidPage(
  titlePanel("Pupils Examination Results Dashboard"),
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "variable",
                  label = "Subject:",
                  choices = c("English" = "ENGLISH",
                              "Maths" = "MATHS",
                              "Science" = "SCIENCE"),
                  selected = "ENGLISH"),
      sliderInput(inputId = "bins",
                  label = "Number of Bins",
                  min = 5,
                  max = 20,
                  value= 10)
                ),
    mainPanel()
```
:::
:::

## Shiny `Output()`
### An overview of Shiny `Output()`

-   After creating all the inputs, we should add elements to the UI to display the outputs.
-   To display output, add it to `fluidPage()` with an `Output()` function.

![](img/image20.jpg)

::: callout-note
-   Similarly to the input functions, all the output functions have a outputId argument that is used to identify each output, and this argument must be unique for each output.
-   Each output needs to be constructed in the server code later.
:::

## Shiny `Output()`
### Shiny `Output()` options

::: columns
::: {.column width="50%"}
-   Outputs can be any object that R creates and that we want to display in our app - such as a plot, a table, or text.
:::

::: {.column width="50%"}
![](img/image28.jpg)
:::
:::

---

### Hands-on Exercise: 

::: columns
::: {.column width="50%"}
Adding [`plotOutput()`](https://shiny.rstudio.com/reference/shiny/1.7.4/plotoutput)

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "6"
ui <- fluidPage(
    titlePanel("Pupils Examination Results Dashboard"),
    sidebarLayout(
        sidebarPanel("Side bar panel"),
        mainPanel(
            plotOutput("distPlot") 
        )    
    )
)
```
:::
:::

## Shiny server.R
### Building an output

There are three rules to build an output in Shiny, they are:

-   Save the output object into the output list (remember the app template - every server function has an output argument).

-   Build the object with a `render()` function, where is the type of output.

-   Access input values using the input list (every server function has an input argument)

::: callout-note
The third rule is only required if you want your output to depend on some input.
:::

## Shiny server.R
### A generic Shiny `render()` syntax

![](img/image21.jpg)

## Shiny server.R

### Shiny `render()`

![](img/image29.jpg)

---

### Hands-on Exercise: Building a basic output

::: columns
::: {.column width="50%"}
Let's first see how to build a very basic output using [`renderPlot()`](https://shiny.rstudio.com/reference/shiny/1.7.4/renderplot). We'll create a plot and send it to the ***distPlot*** output.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-7"
server <- function(input, output){
    output$distPlot <- renderPlot({
        ggplot(exam, aes(ENGLISH)) + 
            geom_histogram(bins = 20, 
                           color="black",  
                           fill="light blue") 
    }) 
} 
```
:::

::: {.column width="50%"}
::: {.callout-note}
-   This simple code shows the first two rules: we're creating a plot inside the `renderPlot()` function, and assigning it to ***distPlot*** in the output list.
-   Remember that every output created in the UI must have a unique ID, now we see why. In order to attach an R object to an output with ID x, we assign the R object to ***output\$distPlot***.
-   Since ***distPlot*** was defined as a ***plotOutput***, we must use the `renderPlot()` function, and we must create a plot inside the `renderPlot()` function.
:::
:::
:::

---

### Hands-on Exercise: Building a basic output

::: columns
::: {.column width="50%"}
First revision.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3" 
server <- function(input, output){
    output$distPlot <- renderPlot({
        x <- unlist(exam[,input$variable])
        ggplot(exam, aes(x)) +
            geom_histogram(bins = input$bin,
                           color="black", 
                           fill="light blue")
    })
}
```
:::
:::

---

### Hands-on Exercise: Building a basic output

::: columns
::: {.column width="50%"}
Using `aes_string()`.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "4"
server <- function(input, output){
    output$distPlot <- renderPlot({
      ggplot(exam, 
             aes_string(x = input$variable)) + 
        geom_histogram(bins = input$bin,
                       color="black", 
                       fill="light blue")
      })
}
```

::: {.callout-note}
-   Notice that [`aes_string()`](https://ggplot2.tidyverse.org/reference/aes_.html) instead of `aes()` of ggplot2 is used. To understand the differences between `aes_string()` and `aes()`, please refer to this [link](https://stackoverflow.com/questions/28897577/what-is-the-difference-between-aes-and-aes-string-ggplot2-in-r).\
:::
:::
:::

## The shinyApp()

::: columns
::: {.column width="50%"}
::: {.callout-important}
-   It is important to add *shinyApp()* at the end of your Shiny application.
:::

```{r}
#| echo: true
#| eval: false
shinyApp(ui = ui, server = server)
```
:::
:::

## Programming Shiny: Survival Tip!

::: {.callout-tip}
-   Always run the entire script, not just up to the point where you're developing code.

-   Sometimes the best way to see what's wrong is to run the app and review the error.

-   Watch out for commas!
:::

## Building Shiny Application: Survival Tip!

::: columns
::: {.column width="50%"}
### What can we learn from Lego?

![](img/image30.jpg){width="464"}
:::

::: {.column width="50%"}
-   Sketch the storyboard
-   Building the app incrementally
    -   Using prototyping approach
    -   Start as simple as possible
    -   Adding features one at a time
-   Save -\> Run App
:::
:::



## References

-   Hadley Wickham (2021) [**Mastering Shiny**](https://mastering-shiny.org/index.html), O'Reilly Media. This is a highly recommended book.

-   [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/), especially Module 1 and 2.

-   [Shiny Three Parts Tutorial](https://shiny.rstudio.com/tutorial/).

-   [Online Function reference](https://shiny.rstudio.com/reference/shiny/1.5.0/)

-   [The basic parts of a Shiny app](https://shiny.rstudio.com/articles/basics.html)

-   [How to build a Shiny app](https://shiny.rstudio.com/articles/build.html)

-   [The Shiny Cheat sheet](https://shiny.rstudio.com/articles/cheatsheet.html)

**Beyond Uncle Google!** Last but not least, when you need help

-   [How to get help](https://shiny.rstudio.com/articles/help.html)

```{r}
#| eval: false 
#| echo: false 
renderthis::to_pdf(from = "https://isss608-ay2022-23jan.netlify.app/ShinyWorkshop/Shiny1/Shiny1.html")
```
