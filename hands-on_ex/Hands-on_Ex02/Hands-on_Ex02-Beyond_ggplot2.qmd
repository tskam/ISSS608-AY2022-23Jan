---
title: "Hands-on Exercise 2: Beyond ggplot2 Fundamentals"
author: "Dr. Kam Tin Seong<br/>Assoc. Professor of Information Systems (Practice)"
institute: "School of Computing and Information Systems,<br/>Singapore Management University"
date: "`r Sys.Date()`"
format: 
  revealjs:
    width: 1600
    height: 900
    show-notes: false
    slide-number: true
    show-slide-number: 'all'
date-format: "DD MMM YYYY"
execute: 
  echo: true
  warning: false
  message: false
editor: visual
---

## Content

::: {style="font-size: 1.5em"}
-   Beyond ggplot2 Themes

-   Beyond ggplot2 Annotation

-   Beyond ggplot2 facet
:::

## Getting started

### Installing and loading the required libraries

::: columns
::: {.column width="50%"}
-   Before we get started, it is important for us to ensure that the required R packages have been installed. If yes, we will load the R packages. If they have yet to be installed, we will install the R packages and load them onto R environment.

-   The chunk code on the right will do the trick.
:::

::: {.column width="50%"}
::: {style="font-size: 1.2em"}
```{r}
pacman::p_load(tidyverse, patchwork, 
               ggthemes, hrbrthemes,
               ggrepel) 
```
:::
:::
:::

------------------------------------------------------------------------

### Importing data

::: columns
::: {.column width="50%"}
-   The code chunk below imports *exam_data.csv* into R environment using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is one of the tidyverse package.

::: {style="font-size: 1.2em"}
```{r}
exam_data <- read_csv("data/Exam_data.csv")
```
:::
:::

::: {.column width="50%"}
-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.
    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.
:::
:::

## Beyond ggplot2 Annotation

::: columns
::: {.column width="50%"}
One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-height: 9
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::
:::

------------------------------------------------------------------------

### Working with ggrepel

::: columns
::: {.column width="50%"}
[**ggrepel**](https://ggrepel.slowkow.com/index.html) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text as in our examples on the right. We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-height: 9
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::
:::

## Beyond ggplot2 Themes

::: columns
::: {.column width="50%"}
ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +  
  ggtitle("Distribution of Maths scores") 

```
:::

::: {style="font-size: 0.65em"}
Refer to this [link](https://ggplot2.tidyverse.org/reference/index.html#themes) to learn more about ggplot2 `Themes`
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 

```
:::
:::

------------------------------------------------------------------------

### Working with ggtheme package

::: columns
::: {.column width="50%"}
[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/index.html) provides ['ggplot2' themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), 'Stata', 'Excel', and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

- It also provides some extra geoms and scales for 'ggplot2'. Consult [this vignette](https://mran.microsoft.com/snapshot/2016-12-28/web/packages/ggthemes/vignettes/ggthemes.html) to learn more.
:::

::: {.column width="50%"}
```{r echo=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::
:::

------------------------------------------------------------------------

### Working with hrbthems package

::: columns
::: {.column width="50%"}
[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

-   The second goal centers around productivity for a production workflow. In fact, this "production workflow" is the context for where the elements of hrbrthemes should be used. Consult [this vignette](https://cran.r-project.org/web/packages/hrbrthemes/vignettes/why_hrbrthemes.html) to learn more.
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::
:::

------------------------------------------------------------------------

### Working with hrbthems package

::: columns
::: {.column width="50%"}
::: {style="font-size: 1.2em"}
```{r}
#| eval: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18, 
              base_size = 15, 
              grid = "Y") 
```
:::

::: {.callout-note}
### What can we learn from the code chunk below?
-   `axis_title_size` argument is used to increase the font size of the axis title to 18,
-   `base_size` argument is used to increase the default axis label to 15, and
-   `grid` argument is used to remove the x-axis grid lines.
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::
:::

## Beyond ggplot2 facet

::: columns
::: {.column width="50%"}
In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics.

::: {style="font-size: 1.2em"}
```{r}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

```{r}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")
```
:::
:::

::: {.column width="50%"}
::: {style="font-size: 1.2em"}
```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::
:::
:::

------------------------------------------------------------------------

### Creating Composite Graphics: pathwork methods

::: columns
::: {.column width="50%"}
It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, I am going to shared with you [**patchwork**](https://patchwork.data-imaginist.com/index.html).

Patchwork package has a very simple syntax where we can create layouts super easily. Here's the general syntax that combines: - Two-Column Layout using the Plus Sign +. - Parenthesis () to create a subplot group. - Two-Row Layout using the Division Sign `\`
:::

::: {.column width=50%}
![](img/image8.png)
:::
:::

------------------------------------------------------------------------

### Working with patchwork

::: {style="font-size: 1.2em"}
```{r}
p1 + p2 / p3
```
:::

------------------------------------------------------------------------

### Working with patchwork

\| will place the plots beside each other, while / will stack them.

::: {style="font-size: 1.2em"}
```{r}
(p1 / p2) | p3
```
:::

To learn more about, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

------------------------------------------------------------------------

### Working with patchwork

**patchwork** also provides auto-tagging capabilities, in order to identify subplots in text:

::: {style="font-size: 1.2em"}
```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

------------------------------------------------------------------------

### Working with patchwork

::: {style="font-size: 1.2em"}
```{r fig.width=12, fig.height=6}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::

------------------------------------------------------------------------

### Working with patchwork

::: columns
::: {.column width="50%"}
Beside providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

::: {style="font-size: 1.2em"}
```{r}
#| eval: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-height: 9
p12 <- p1|p2
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::
:::

## Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)
-   [ggrepel](https://ggrepel.slowkow.com/index.html)
-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)
-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)
-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)
-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)
-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)

```{r}
#| eval: false
#| echo: false
renderthis::to_pdf(from = "https://isss608-ay2022-23jan.netlify.app/hands-on_ex/Hands-on_Ex02/Hands-on_Ex02-Beyond_ggplot2.html")
```
